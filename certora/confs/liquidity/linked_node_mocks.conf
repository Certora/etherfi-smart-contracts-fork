{
    "files": [
        "src/LiquidityPool.sol",
        "src/StakingManager.sol",
        "src/EtherFiNodesManager.sol",
        "src/MembershipManager.sol",
        "src/TNFT.sol",
        "src/BNFT.sol",
        "src/EETH.sol",
        "src/WithdrawRequestNFT.sol",
        "src/AuctionManager.sol",
        "src/Liquifier.sol",

        // NOTE: Using a unique node, consider more
        "src/EtherFiNode.sol",

        // NOTE: Using a mock
        "lib/openzeppelin-contracts-upgradeable/contracts/mocks/ERC721ReceiverMockUpgradeable.sol",

        // NOTE: Using a mock for IDepositContract
        "test/eigenlayer-mocks/ETHDepositMock.sol:ETHPOSDepositMock"
    ],
    "link": [
        "LiquidityPool:stakingManager=StakingManager",
        "LiquidityPool:nodesManager=EtherFiNodesManager",
        "LiquidityPool:membershipManager=MembershipManager",
        "LiquidityPool:tNft=TNFT",
        "LiquidityPool:eETH=EETH",
        "LiquidityPool:withdrawRequestNFT=WithdrawRequestNFT",
        "LiquidityPool:auctionManager=AuctionManager",
        "LiquidityPool:liquifier=Liquifier",
        "EETH:liquidityPool=LiquidityPool",
        "StakingManager:auctionManager=AuctionManager",
        "StakingManager:nodesManager=EtherFiNodesManager",
        "StakingManager:BNFTInterfaceInstance=BNFT",
        "StakingManager:TNFTInterfaceInstance=TNFT",
        "StakingManager:depositContractEth2=ETHPOSDepositMock",  // NOTE: using a mock
        "EtherFiNodesManager:tnft=TNFT",
        "EtherFiNodesManager:bnft=BNFT",
        "EtherFiNodesManager:stakingManagerContract=StakingManager"
    ],
    "packages": [
        "@openzeppelin=lib/openzeppelin-contracts",
        "forge-std=lib/forge-std/src"
    ],
    // Using "solc_map" since ETHPOSDepositMock requires a different solc version
    "solc_map": {
        "LiquidityPool": "solc8.24",
        "StakingManager": "solc8.24",
        "EtherFiNodesManager": "solc8.24",
        "MembershipManager": "solc8.24",
        "TNFT": "solc8.24",
        "BNFT": "solc8.24",
        "EETH": "solc8.24",
        "WithdrawRequestNFT": "solc8.24",
        "AuctionManager": "solc8.24",
        "Liquifier": "solc8.24",
        "EtherFiNode": "solc8.24",
        "ERC721ReceiverMockUpgradeable": "solc8.24",
        "ETHPOSDepositMock": "solc8.12"  // The only exception
    },
    "verify": "LiquidityPool:certora/specs/liquidity/linked_node_mocks.spec",
    "optimistic_loop": true,
    "optimistic_fallback": true,
    "optimistic_hashing": true,
    "parametric_contracts": ["LiquidityPool"],
    "msg": "Linked LiquidityPool with single EtherFiNode and mocks"
}
