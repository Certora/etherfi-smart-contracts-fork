Miscellaneous rule types
========================

All the examples here are found at :clink:`/certora/specs/lesson1/Examples.spec`.

.. index::
   single: revert
   single: withrevert

Revert conditions
-----------------

* Use :cvl:`@withrevert`.
* The results will be stored in :cvl:`lastReverted` (which is a boolean).
* Any other Solidity call will *change* the value of :cvl:`lastReverted`.
* Best practice is to store it immediately, e.g. :cvl:`bool reverted = lastReverted;`.

Wrong revert rule
^^^^^^^^^^^^^^^^^

.. cvlinclude:: ../../../specs/lesson1/Examples.spec
   :cvlobject: wrongRevertRule
   :caption: :clink:`wrongRevertRule</certora/specs/lesson1/Examples.spec>`

* This rule is violated, see `transferRevertsWrong report`_
* What is the mistake in the rule?

.. dropdown:: Fixed rule

   .. cvlinclude:: ../../../specs/lesson1/Examples.spec
      :cvlobject: revertRule

   * Report: `fixed revert rule report`_.

Missing revert conditions
^^^^^^^^^^^^^^^^^^^^^^^^^

.. cvlinclude:: ../../../specs/lesson1/Examples.spec
   :cvlobject: wrongFullRevertConditions
   :caption: :clink:`wrongRevertRule</certora/specs/lesson1/Examples.spec>`

* This rule attempts to show all possible revert cases.
* However, there are counter examples:

  * Counter example `non-zero message value`_.
  * Counter example `unauthorized message sender`_.
* How to fix this rule?

.. dropdown:: Fixed rule

   .. cvlinclude:: ../../../specs/lesson1/Examples.spec
      :cvlobject: fullRevertConditions

   * Report: `full revert conditions report`_.


.. index::
   single: satisfy

Satisfy rules
-------------
* The :cvl:`satisfy` statement generates positive examples.
* Its syntax is :cvl:`satisfy <boolean condition>;`.
* Useful for "debugging".
* See `satisfy rules report`_ for the examples generated by the two rules below.

Last key example
^^^^^^^^^^^^^^^^
Shows that using the last key is possible.

.. cvlinclude:: ../../../specs/lesson1/Examples.spec
   :cvlobject: satisfyExampleLastKey

First key example
^^^^^^^^^^^^^^^^^
Shows that using the first key is possible.

.. cvlinclude:: ../../../specs/lesson1/Examples.spec
   :cvlobject: satisfyExampleFirstKey


Relational properties
---------------------
We'll use the
:clink:`Voting contract</certora/training-examples/lesson1/solidity_intro/Voting.sol>`
for this examples.

.. dropdown:: Voting contract

   .. literalinclude:: ../../../training-examples/lesson1/solidity_intro/Voting.sol
      :language: solidity

* The following rule shows that the change in total votes equals the sum of
  changes in the in-favor and against results.
* Note the use of the :cvl:`mathint` type, this is explained in
  :ref:`integer_types_in_cvl` below.
* Report: `relational rule report`_.

.. cvlinclude:: ../../../training-examples/lesson1/solidity_intro/VotingRelational.spec
   :cvlobject: changeVotesIntegrity
   :caption: :clink:`Relational rule changeVotesIntegrity</certora/training-examples/lesson1/solidity_intro/VotingRelational.spec>`


.. index::
   single: mathint
   single: type; mathint
   single: integer; casting
   :name: integer_types_in_cvl

Detour - integer types in CVL
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
CVL supports all integer types that are available in solidity, such as :cvl:`uint8`.
In addition, CVL has the *mathematical integer* type: :cvl:`mathint`. These types
obey the following two rules:

#. All arithmetic operations (i.e. :cvl:`+`, :cvl:`-`, :cvl:`*`, :cvl:`/`, and :cvl:`%`)
   return :cvl:`mathint` type
#. When using comparison operators, such as: :cvl:`==`, and :cvl:`<=`, on integer types
   both sides *must have the same type*

These rules mean that sometimes you will need to cast a solidity integer type to a
:cvl:`mathint` and vice versa. To cast an integer into :cvl:`mathint` use the function
:cvl:`to_mathint`. To cast :cvl:`mathint x` to a solidity integer type, say
:cvl:`uint128`, there are two possible functions:

* :cvl:`require_uint128(x)` - in this case the Prover will ignore all cases where
  there is *overflow* (i.e. :cvl:`x > max_uint128`) or *underflow* (i.e. :cvl:`x < 0`)
* :cvl:`assert_uint128(x)` - in this case an overflow or an underflow will cause a
  violation


.. Links
   -----

.. _transferRevertsWrong report:
   https://prover.certora.com/output/98279/461f7f9c233e469e9b1cdca37ab46aa8?anonymousKey=f3579813aeeab390a23a8794f0abdda9eafcecb1

.. _fixed revert rule report:
   https://prover.certora.com/output/98279/3081060bf48b4d549006edfd50aa4863?anonymousKey=5f485974483fbd489abd3d3b1dcb5b07d539738a

.. _non-zero message value:
   https://prover.certora.com/output/98279/a8808464a54b48249301a137fcb5728a/?anonymousKey=4f8dac7e250572c23effd80d5c04f366af9a44ad

.. _unauthorized message sender:
   https://prover.certora.com/output/98279/53a1ff1a256242d5991e64e14d6f5a10/?anonymousKey=50711e5b96852944a7a79a02a1723ab11d5d8ad9

.. _full revert conditions report:
   https://prover.certora.com/output/98279/76928ccb281e439e97acaeefccbd49a7?anonymousKey=21014d5629cb02e29849f1760127c19c0668179d

.. _satisfy rules report:
   https://prover.certora.com/output/98279/f91296f5dc414d1abf8dd419d7004e53?anonymousKey=2f5196be77f896a9db8d52f50e556324cac723d7

.. _relational rule report:
   https://prover.certora.com/output/98279/27bc2b39079743c79708bf957c0ea031?anonymousKey=27a3e9120f8c29907ebdae2de2387e040f622e06
